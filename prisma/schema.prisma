generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  CASHIER
  COURIER
}

enum OrderStatus {
  PENDING
  RECEIVED
  WASHING
  DRYING
  IRONING
  READY
  DELIVERING
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
  REFUNDED
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  name               String
  passwordHash       String
  role               UserRole          @default(CASHIER)
  outletId           String?
  outlet             Outlet?           @relation(fields: [outletId], references: [id])
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdOrders      Order[]           @relation("OrderCreatedBy")
  assignedDeliveries PickupDelivery[]  @relation("PickupCourier")
  refreshTokens      RefreshToken[]
}

model Outlet {
  id        String           @id @default(cuid())
  code      String           @unique
  name      String
  address   String
  phone     String?
  users     User[]
  services  Service[]
  orders    Order[]
  sequences OrderSequence[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  phone     String    @unique
  email     String?   @unique
  address   String?
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id        String        @id @default(cuid())
  outletId  String
  outlet    Outlet        @relation(fields: [outletId], references: [id])
  name      String
  type      String
  unit      String
  price     Decimal       @db.Decimal(10, 2)
  isActive  Boolean       @default(true)
  items     OrderItem[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([outletId, isActive])
}

model Voucher {
  id          String    @id @default(cuid())
  code        String    @unique
  description String?
  percentOff  Int?
  flatOff     Decimal?  @db.Decimal(10, 2)
  minSubtotal Decimal?  @db.Decimal(10, 2)
  maxDiscount Decimal?  @db.Decimal(10, 2)
  startsAt    DateTime?
  endsAt      DateTime?
  isActive    Boolean   @default(true)
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id             String        @id @default(cuid())
  code           String        @unique
  outletId       String
  outlet         Outlet        @relation(fields: [outletId], references: [id])
  customerId     String
  customer       Customer      @relation(fields: [customerId], references: [id])
  status         OrderStatus   @default(PENDING)
  isExpress      Boolean       @default(false)
  expressFee     Decimal?      @db.Decimal(10, 2)
  notes          String?
  subtotal       Decimal       @db.Decimal(12, 2)
  discount       Decimal       @db.Decimal(12, 2) @default(0)
  total          Decimal       @db.Decimal(12, 2)
  paidAmount     Decimal       @db.Decimal(12, 2) @default(0)
  paymentStatus  PaymentStatus @default(UNPAID)
  voucherId      String?
  voucher        Voucher?      @relation(fields: [voucherId], references: [id])
  items          OrderItem[]
  payments       Payment[]
  pickupDelivery PickupDelivery?
  readyAt        DateTime?
  completedAt    DateTime?
  canceledAt     DateTime?
  createdById    String?
  createdBy      User?         @relation("OrderCreatedBy", fields: [createdById], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([outletId, createdAt])
  @@index([customerId])
  @@index([status])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
  qty       Decimal @db.Decimal(10, 2)
  price     Decimal @db.Decimal(10, 2)
  lineTotal Decimal @db.Decimal(12, 2)
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  method    String
  amount    Decimal  @db.Decimal(12, 2)
  note      String?
  createdAt DateTime @default(now())
}

model PickupDelivery {
  id              String   @id @default(cuid())
  orderId         String   @unique
  order           Order    @relation(fields: [orderId], references: [id])
  pickupAddress   String?
  deliveryAddress String?
  scheduledAt     DateTime?
  courierId       String?
  courier         User?    @relation("PickupCourier", fields: [courierId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OrderSequence {
  id        String  @id @default(cuid())
  outletId  String
  dateKey   String
  seq       Int
  outlet    Outlet @relation(fields: [outletId], references: [id])

  @@unique([outletId, dateKey])
}

model RefreshToken {
  id        String   @id @default(cuid())
  tokenHash String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  revokedAt DateTime?

  @@index([userId])
  @@index([expiresAt])
}
